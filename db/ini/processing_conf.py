import os
import sys
import ConfigParser

''' Path to configuration file '''
conf_filepath = os.path.abspath(os.path.dirname(__file__)) + '/processing.ini'


class ProcessingConfig:
    ''' Class that stores processing configuration information 
        read from INI file'''

    def __init__(self, filepath=conf_filepath):
        self.filepath = filepath

        # make sure filepath exists
        if not os.path.exists(filepath):
            print filepath
            print '[-] %s does not exist' % os.path.abspath(filepath)
            sys.exit(1)

        # Read configuration file
        config = ConfigParser.SafeConfigParser()
        config.readfp(open(filepath))

        # Global Paths
        self.log_root = config.get('global', 'log_root')

        # Check if log path exists
        # if not os.path.exists(self.log_root):
        #     print '[-] %s does not exist' % os.path.abspath(self.log_root)
        #     sys.exit(-1)

        # Cuckoo
        self.cuckoo_path = config.get('cuckoo', 'cuckoo_path')

        # Database
        self.db_host = config.get('database', 'db_host')
        self.db_port = config.getint('database', 'db_port')
        self.db_name = config.get('database', 'db_name')
        self.db_user = config.get('database', 'db_user')
        self.db_pass = os.environ[config.get('database', 'db_pass')]
        
        # MongoDB
        self.mdb_host = config.get('mongodb', 'mdb_host')
        self.mdb_port = config.getint('mongodb', 'mdb_port')
        self.mdb_name = config.get('mongodb', 'mdb_name')
        self.mdb_user = config.get('mongodb', 'mdb_user')
        self.mdb_pass = os.environ[config.get('mongodb', 'mdb_pass')]

        # FilESTABLE
        self.f_dataset = config.get('filestable', 'dataset_name')
        self.f_fpath = config.get('filestable', 'filepath')
        self.f_action = config.get('filestable', 'action')
        self.f_icon_extr = config.getboolean('filestable', 'icon_extract')
        self.f_continue = config.getboolean('filestable', 'continue')

        # VirusTotal
        self.vt_key_path = config.get('vt', 'vt_key_path')
        self.vt_query_file = config.get('vt', 'query_file')
        self.vt_out_dir = config.get('vt', 'out_dir')
        if self.vt_out_dir and self.vt_out_dir[-1] != '/': 
            self.vt_out_dir = self.vt_out_dir + '/'
        self.vt_batch_limit = config.getint('vt', 'batch_limit')
        self.vt_rate_limit = config.getint('vt', 'vt_rate_limit')
        self.vt_logfile = config.get('vt', 'logfile')
        self.vt_force_query = config.getboolean('vt', 'force_vt_query')
        self.vt_mongodb_insert = config.getboolean('vt', 'mongo_db_insert')
        self.vt_dataset = config.get('vt', 'dataset_name').split(',')
        self.vt_dataset = list(map(lambda x: x.strip(), self.vt_dataset))
        self.vt_email = config.get('vt', 'email')
        self.vt_local_cache = config.get('vt', 'local_cache_dir')

        # Network processing
        self.bro_bin = config.get('network', 'bro_bin')
        self.bro_script_25 = config.get('network', 'bro_script_25')
        self.bro_http_script = config.get('network', 'bro_http_script')
        self.vm_host = config.get('network', 'vm_host')
        self.vm_ips = [v.strip()\
                          for v in config.\
                                   get('network', 'vm_ips').\
                                   split(',')]
        self.ignore_icmp = config.getboolean('network', 'ignore_icmp')
        self.ignore_endpoints = [v.strip()\
                              for v in config.\
                                       get('network', 'ignore_endpoints').\
                                       split(',')]
        self.ignore_dns_queries = [v.strip()\
                                   for v in config.\
                                       get('network', 'ignore_dns_queries').\
                                       split(',')]

        # Other
        self.tmp_dir = config.get('other', 'tmp_dir')

    def tprint(self):
        ''' Print the object as text'''

        print "*** database ***"
        print "  db_host: %s\n  db_port = %s\n  db_name = %s" % (
            self.db_host, self.db_port, self.db_name)
        print "  db_user: %s\n  db_pass = %s" % (self.db_user, self.db_pass)
        
        print '*** MongoDB Database ***'
        print '  db_host: %s\n  db_port = %s\n  db_name = %s' %\
            (self.mdb_host, self.mdb_port, self.mdb_name)
        print '  db_user: %s\n  db_pass = %s' % (self.mdb_user, self.mdb_pass)

        print "*** filestable ***"
        print "  filepath =  %s" % (self.f_fpath)
        print "  action   =  %s" % (self.f_action)
        print "  dataset =  %s" % (self.f_dataset)
        print "  icon_extract =  %s" % (self.f_icon_extr)
        print "  continue =  %s" % (self.f_continue)

        print '*** vt ***'
        print '  vt_key_path =  %s' % self.vt_key_path
        print '  vt_query_file =  %s' % self.vt_query_file
        print '  vt_out_dir =  %s' % self.vt_out_dir
        print '  vt_batch_limit =  %s' % self.vt_batch_limit
        print '  vt_rate_limit =  %s' % self.vt_rate_limit
        print '  vt_logfile =  %s' % self.vt_logfile
        print '  vt_force_query =  %s' % self.vt_force_query
        print '  vt_mongodb_insert =  %s' % self.vt_mongodb_insert
        print '  vt_dataset =  %s' % self.vt_dataset
        print '  vt_email =  %s' % self.vt_email
        print '  vt_local_cache =  %s' % self.vt_local_cache
        
        print "*** network ***"
        print "  bro_bin = %s" % (self.bro_bin)
        print "  bro_script_25 = %s" % (self.bro_script_25)
        print "  bro_http_script = %s" % (self.bro_http_script)
        print "  vm_host = %s" % (self.vm_host)
        print "  ignore_icmp = %s" % (self.ignore_icmp)
        print "  ignore_endpoints = %s" % (self.ignore_endpoints)
        print "  ignore_dns_queries = %s" % (self.ignore_dns_queries)

        print "*** other ***"
        print "  tmp_dir = %s" % (self.tmp_dir)


def usage():
    print "USAGE: %s <ini_file>" % (sys.argv[0])

''' main '''
if __name__ == '__main__':
    # Get configuration filepath from command line argument
    if (len(sys.argv) > 1):
        filepath = sys.argv[1]
    else:
        filepath = conf_filepath

    # Parse configuration file
    config = ProcessingConfig(filepath)

    # Print configuration
    config.tprint()
    print "Successfully parsed config file: %s" % (filepath)
