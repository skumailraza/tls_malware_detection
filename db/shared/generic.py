import hashlib
'''Contains generic functions that do not fit to other libraries'''


def md5_data(data):
    '''Calculates the MD5 hash of the data provided
       Args:
         -Data[string|list]
       Returns:
         -Returns the calculated hash
    '''
    m = hashlib.md5()
    if isinstance(data, list):
        m.update(''.join(data))
    else:
        m.update(data)
    data_hash = m.hexdigest()
    return data_hash


def sha1_data(data):
    '''Calculates the SHA1 hash of the data provided
       Args:
         -Data[string|list]
       Returns:
         -Returns the calculated hash
    '''
    m = hashlib.sha1()
    if isinstance(data, list):
        m.update(''.join(data))
    else:
        m.update(data)
    data_hash = m.hexdigest()
    return data_hash


def sha256_data(data):
    '''Calculates the SHA256 hash of the data provided
       Args:
         -Data[string|list]
       Returns:
         -Returns the calculated hash
    '''
    m = hashlib.sha256()
    if isinstance(data, list):
        m.update(''.join(data))
    else:
        m.update(data)
    data_hash = m.hexdigest()
    return data_hash


def sha512_data(data):
    '''Calculates the SHA512 hash of the data provided
       Args:
         -Data[string|list]
       Returns:
         -Returns the calculated hash
    '''
    m = hashlib.sha512()
    if isinstance(data, list):
        m.update(''.join(data))
    else:
        m.update(data)
    data_hash = m.hexdigest()
    return data_hash


def md5_file(fname):
    ''' Calculates the MD5 hash of a file'''
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def sha1_file(fname):
    ''' Calculates the SHA1 hash of a file'''
    hash_sha1 = hashlib.sha1()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha1.update(chunk)
    return hash_sha1.hexdigest()


def sha256_file(fname):
    ''' Calculates the SHA256 hash of a file'''
    hash_sha256 = hashlib.sha256()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha256.update(chunk)
    return hash_sha256.hexdigest()


def sha512_file(fname):
    ''' Calculates the SHA512 hash of a file'''
    hash_sha512 = hashlib.sha512()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha512.update(chunk)
    return hash_sha512.hexdigest()


def guess_hash(h):
    '''Given a hash string, guess the hash type based on the string length'''
    hlen = len(h)
    if hlen == 32:
        return 'md5'
    elif hlen == 40:
        return 'sha1'
    elif hlen == 64:
        return 'sha256'
    else:
        return None

