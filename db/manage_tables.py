#!/usr/bin/python2
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(
    os.path.abspath(os.path.dirname(__file__))))))

# sys.path.insert(1, '../ini')
sys.path.insert(1, 'ini')
import processing_conf as pconf
# sys.path.insert(1, '../../../trunk/shared/')
sys.path.insert(1, 'shared/')
import dbconnect as db


def usage():
    print >> sys.stderr, "Usage: %s create|truncate|drop\n" % sys.argv[0]
    print >> sys.stderr, "- Create: Create all the tables"
    print >> sys.stderr,\
        "- Truncate: Delete the rows in all the tables. Maintain the schema."
    print >> sys.stderr, "- Drop: Drop all the tables."
    exit(2)


fieldsub = {"id.orig_h": "src_ip",
            "id.orig_p": "src_port",
            "id.resp_h": "dst_ip",
            "id.resp_p": "dst_port"}


def create_dns_types_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""
                   CREATE TABLE IF NOT EXISTS `NET_DNS_TYPES`(
                   `TYPE_ID` SMALLINT UNSIGNED NOT NULL,
                   `TYPE` VARCHAR(20),
                   PRIMARY KEY (`type_id`))""")
    cursor.close()

def populate_dns_types_table(conn):
    cursor = conn.cursor() 
    cursor.executemany("""INSERT INTO `NET_DNS_TYPES`(`TYPE_ID`, `TYPE`)
                       VALUES (%s, %s)""",
                       [
                           (1, 'A'),
                           (2, 'NS'),
                           (3, 'MD'),
                           (4, 'MF'),
                           (5, 'CNAME'),
                           (6, 'SOA'),
                           (7, 'MB'),
                           (8, 'MG'),
                           (9, 'MR'),
                           (10, 'NULL'),
                           (11, 'WKS'),
                           (12, 'PTR'),
                           (13, 'HINFO'),
                           (14, 'MINFO'),
                           (15, 'MX'),
                           (16, 'TXT'),
                           (17, 'RP'),
                           (18, 'AFSDB'),
                           (19, 'X25'),
                           (20, 'ISDN'),
                           (21, 'RT'),
                           (22, 'NSAP'),
                           (23, 'NSAP-PTR'),
                           (24, 'SIG'),
                           (25, 'KEY'),
                           (26, 'PX'),
                           (27, 'GPOS'),
                           (28, 'AAAA'),
                           (29, 'LOC'),
                           (30, 'NXT'),
                           (31, 'EID'),
                           (32, 'NIMLOC'),
                           (33, 'SRV'),
                           (34, 'ATMA'),
                           (35, 'NAPTR'),
                           (36, 'KX'),
                           (37, 'CERT'),
                           (38, 'A6'),
                           (39, 'DNAME'),
                           (40, 'SINK'),
                           (41, 'OPT'),
                           (42, 'APL'),
                           (43, 'DS'),
                           (44, 'SSHFP'),
                           (45, 'IPSECKEY'),
                           (46, 'RRSIG'),
                           (47, 'NSEC'),
                           (48, 'DNSKEY'),
                           (49, 'DHCID'),
                           (50, 'NSEC3'),
                           (51, 'NSEC3PARAM'),
                           (52, 'TLSA'),
                           (55, 'HIP'),
                           (56, 'NINFO'),
                           (57, 'RKEY'),
                           (58, 'TALINK'),
                           (59, 'CDS'),
                           (60, 'CDNSKEY'),
                           (61, 'OPENPGPKEY'),
                           (62, 'CSYNC'),
                           (99, 'SPF'),
                           (100, 'UINFO'),
                           (101, 'UID'),
                           (102, 'GID'),
                           (103, 'UNSPEC'),
                           (104, 'NID'),
                           (105, 'L32'),
                           (106, 'L64'),
                           (107, 'LP'),
                           (108, 'EUI48'),
                           (109, 'EUI64'),
                           (249, 'TKEY'),
                           (250, 'TSIG'),
                           (251, 'IXFR'),
                           (252, 'AXFR'),
                           (253, 'MAILB'),
                           (254, 'MAILA'),
                           (255, '*'),
                           (256, 'URI'),
                           (257, 'CAA'),
                           (32768, 'TA'),
                           (32769, 'DLV')
                       ])
    cursor.close() 


def create_http_status_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""
                   CREATE TABLE IF NOT EXISTS `NET_HTTP_STATUS`(
                   `HTTP_STATUS_ID` SMALLINT UNSIGNED NOT NULL,
                   `HTTP_STATUS` VARCHAR(100),
                   PRIMARY KEY (`http_status_id`))""")
    cursor.close()


def populate_http_status_table(conn):
    cursor = conn.cursor() 
    cursor.executemany("""INSERT INTO `NET_HTTP_STATUS`(`HTTP_STATUS_ID`,
                       `HTTP_STATUS`)
                       VALUES (%s, %s)""",
                       [
                           (100, 'Continue'),
                           (101, 'Switching Protocols'),
                           (102, 'Processing'),
                           (200, 'OK'),
                           (201, 'Created'),
                           (202, 'Accepted'),
                           (203, 'Non-Authoritative Information'),
                           (204, 'No Content'),
                           (205, 'Reset Content'),
                           (206, 'Partial Content'),
                           (207, 'Multi-Status'),
                           (208, 'Already Reported'),
                           (226, 'IM Used'),
                           (300, 'Multiple Choices'),
                           (301, 'Moved Permanently'),
                           (302, 'Found'),
                           (303, 'See Other'),
                           (304, 'Not Modified'),
                           (305, 'Use Proxy'),
                           (306, '(Unused)'),
                           (307, 'Temporary Redirect'),
                           (308, 'Permanent Redirect'),
                           (400, 'Bad Request'),
                           (401, 'Unauthorized'),
                           (402, 'Payment Required'),
                           (403, 'Forbidden'),
                           (404, 'Not Found'),
                           (405, 'Method Not Allowed'),
                           (406, 'Not Acceptable'),
                           (407, 'Proxy Authentication Required'),
                           (408, 'Request Timeout'),
                           (409, 'Conflict'),
                           (410, 'Gone'),
                           (411, 'Length Required'),
                           (412, 'Precondition Failed'),
                           (413, 'Payload Too Large'),
                           (414, 'URI Too Long'),
                           (415, 'Unsupported Media Type'),
                           (416, 'Range Not Satisfiable'),
                           (417, 'Expectation Failed'),
                           (418, 'I\'m a teapot'),
                           (421, 'Misdirected Request'),
                           (422, 'Unprocessable Entity'),
                           (423, 'Locked'),
                           (424, 'Failed Dependency'),
                           (426, 'Upgrade Required'),
                           (428, 'Precondition Required'),
                           (429, 'Too Many Requests'),
                           (431, 'Request Header Fields Too Large'),
                           (500, 'Internal Server Error'),
                           (501, 'Not Implemented'),
                           (502, 'Bad Gateway'),
                           (503, 'Service Unavailable'),
                           (504, 'Gateway Timeout'),
                           (505, 'HTTP Version Not Supported'),
                           (506, 'Variant Also Negotiates'),
                           (507, 'Insufficient Storage'),
                           (508, 'Loop Detected'),
                           (510, 'Not Extended'),
                           (511, 'Network Authentication Required'),
                           (520, 'Unknown Error (Cloudflare)'),
                           (521, 'Web Server is Down (Cloudflare)'),
                           (522, 'Connection Timed Out (Cloudflare)'),
                           (523, 'Origin is Unreachable (Cloudflare)'),
                           (524, 'A Timeout Occurred (Cloudflare)'),
                           (525, 'SSL Handshake Failed (Cloudflare)'),
                           (526, 'Invalid SSL Certificate (Cloudflare)'),
                           (527, 'Railgun Error (Cloudflare)'),
                           (600, 'Domain not exists')
                       ])
    cursor.close()


def create_dns_rcodes_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""
                   CREATE TABLE IF NOT EXISTS `NET_DNS_RCODES`(
                   `RCODE_ID` SMALLINT UNSIGNED NOT NULL,
                   `RCODE` VARCHAR(20),
                   PRIMARY KEY (`rcode_id`))""")
    cursor.close()


def populate_dns_rcodes_table(conn):
    cursor = conn.cursor() 
    cursor.executemany("""INSERT INTO `NET_DNS_RCODES`(`RCODE_ID`, `RCODE`)
                       VALUES (%s, %s)""",
                       [
                           (0, 'NOERROR'),
                           (1, 'FORMERR'),
                           (2, 'SERVFAIL'),
                           (3, 'NXDOMAIN'),
                           (4, 'NOTIMP'),
                           (5, 'REFUSED'),
                           (6, 'YXDOMAIN'),
                           (7, 'XRRSET'),
                           (8, 'NOTAUTH'),
                           (9, 'NOTZONE')
                       ])
    cursor.close()

def create_http_bro_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_HTTP` (
            `HTTP_CONN_ID` int(11) NOT NULL AUTO_INCREMENT,
            `CONN_ID` int(11) DEFAULT NULL,
            `RUN_ID` int(11) DEFAULT NULL,
            `TS` timestamp NULL DEFAULT NULL,
            `TS_USEC` int(11) NOT NULL,
            `METHOD` varchar(20) COLLATE utf16_bin DEFAULT NULL,
            `DOMAIN_ID` int(11) DEFAULT NULL,
            `ESLD_ID` int(11) DEFAULT NULL,
            `UA_ID` int(11) DEFAULT NULL,
            `IP_ID` int(11) DEFAULT NULL,
            `REFERER_ID` int(11) DEFAULT NULL,
            `SERVER_ID` int(11) DEFAULT NULL,
            `URL_ID` int(11) DEFAULT NULL,
            `LOCATION_ID` int(11) DEFAULT NULL,
            `REQ_CONTENT_LENGTH` int(11) DEFAULT NULL,
            `RESP_CONTENT_LENGTH` int(11) DEFAULT NULL,
            `STATUS_CODE` smallint(5) unsigned DEFAULT NULL,
            `REQ_CONTENT_TYPE` int(11) DEFAULT NULL,
            `REQ_FILE_ID` int(11) DEFAULT NULL,
            `RESP_CONTENT_TYPE` int(11) DEFAULT NULL,
            `RESP_FILE_ID` int(11) DEFAULT NULL,
            PRIMARY KEY (`HTTP_CONN_ID`),
            KEY `CONN_ID` (`CONN_ID`),
            KEY `DOMAIN_ID` (`DOMAIN_ID`),
            KEY `ESLD_ID` (`ESLD_ID`),
            KEY `UA_ID` (`UA_ID`),
            KEY `IP_ID` (`IP_ID`),
            KEY `REFERER_ID` (`REFERER_ID`),
            KEY `SERVER_ID` (`SERVER_ID`),
            KEY `URL_ID` (`URL_ID`),
            KEY `LOCATION_ID` (`LOCATION_ID`),
            KEY `STATUS_CODE` (`STATUS_CODE`),
            KEY `REQ_CONTENT_TYPE` (`REQ_CONTENT_TYPE`),
            KEY `RESP_CONTENT_TYPE` (`RESP_CONTENT_TYPE`),
            KEY `REQ_FILE_ID` (`REQ_FILE_ID`),
            KEY `RESP_FILE_ID` (`RESP_FILE_ID`),
            KEY `FK_HTTP_RUN_ID` (`RUN_ID`))
       ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
       ALTER TABLE `NET_HTTP`
       ADD CONSTRAINT `FK_HTTP_RUN_ID` FOREIGN KEY (`RUN_ID`)
           REFERENCES `RUNS` (`RUN_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_1` FOREIGN KEY (`CONN_ID`)
            REFERENCES `NET_CONNS` (`conn_id`),
       ADD CONSTRAINT `NET_HTTP_IBFK_10` FOREIGN KEY (`LOCATION_ID`)
            REFERENCES `NET_URLS` (`URL_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_11` FOREIGN KEY (`STATUS_CODE`)
            REFERENCES `NET_HTTP_STATUS` (`HTTP_STATUS_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_12` FOREIGN KEY (`REQ_CONTENT_TYPE`)
            REFERENCES `NET_MIME_TYPES` (`MIME_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_13` FOREIGN KEY (`RESP_CONTENT_TYPE`)
            REFERENCES `NET_MIME_TYPES` (`MIME_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_14` FOREIGN KEY (`REQ_FILE_ID`)
            REFERENCES `NET_FILES` (`FILE_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_15` FOREIGN KEY (`RESP_FILE_ID`)
            REFERENCES `NET_FILES` (`FILE_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_3` FOREIGN KEY (`DOMAIN_ID`)
            REFERENCES `NET_DOMAINS` (`DOMAIN_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_4` FOREIGN KEY (`ESLD_ID`)
            REFERENCES `NET_ESLDS` (`ESLD_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_5` FOREIGN KEY (`UA_ID`)
            REFERENCES `NET_HTTP_UA` (`UA_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_6` FOREIGN KEY (`IP_ID`)
            REFERENCES `NET_ADDRESSES` (`IP_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_7` FOREIGN KEY (`REFERER_ID`)
            REFERENCES `NET_URLS` (`URL_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_8` FOREIGN KEY (`SERVER_ID`)
            REFERENCES `NET_HTTP_SERVERS` (`SERVER_ID`),
       ADD CONSTRAINT `NET_HTTP_IBFK_9` FOREIGN KEY (`URL_ID`)
            REFERENCES `NET_URLS` (`URL_ID`);
       """)
    cursor.close() 

def create_files_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_FILES` (
                   `FILE_ID` int(11) NOT NULL AUTO_INCREMENT,
                   `FILETYPE` int(11) DEFAULT NULL,
                   `SIZE` int(11) NOT NULL,
                   `MD5` varchar(100) DEFAULT NULL,
                   `SHA1` varchar(100) DEFAULT NULL,
                   PRIMARY KEY (`FILE_ID`),
                   UNIQUE KEY `UNIQUE_ENTRY` (`MD5`),
                   KEY `FK_FILETYPE` (`FILETYPE`))
                   ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;

                   ALTER TABLE `NET_FILES`
                   ADD CONSTRAINT `FK_FILETYPE` FOREIGN KEY (`FILETYPE`)
                       REFERENCES `NET_MIME_TYPES` (`MIME_ID`);
                   """)
    cursor.close() 


def create_http_proxy_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_HTTP_PROXY` (
           `HTTP_CONN_ID` int(11) NOT NULL AUTO_INCREMENT,
           `CONN_ID` int(11) NOT NULL,
           `RUN_ID` int(11) NOT NULL,
           `SSL_ID` int(11) DEFAULT NULL,
           `TS` timestamp NOT NULL,
           `TS_MS` int(11) NOT NULL,
           `IP_ID` int(11) DEFAULT NULL,
           `METHOD` varchar(20) COLLATE utf16_bin DEFAULT NULL,
           `URL` varchar(2000) COLLATE utf16_bin DEFAULT NULL,
           `URL_ID` int(11) DEFAULT NULL,
           `HOST` varchar(200) COLLATE utf16_bin DEFAULT NULL,
           `DOMAIN_ID` int(11) DEFAULT NULL,
           `ESLD_ID` int(11) DEFAULT NULL,
           `UA_ID` int(11) DEFAULT NULL,
           `REFERER_ID` int(11) DEFAULT NULL,
           `REQ_CONTENT_TYPE` varchar(500) COLLATE utf16_bin DEFAULT NULL,
           `REQ_CONTENT_LENGTH` int(11) DEFAULT NULL,
           `REQ_HEADERS` longblob,
           `REQ_CONTENT` longblob,
           `REQ_CONTENT_HASH` varchar(50) COLLATE utf16_bin DEFAULT NULL,
           `RESP_CODE` int(11) DEFAULT NULL,
           `RESP_MSG` varchar(20) COLLATE utf16_bin DEFAULT NULL,
           `SERVER_ID` int(11) DEFAULT NULL,
           `RESP_CONTENT_TYPE` varchar(200) COLLATE utf16_bin DEFAULT NULL,
           `RESP_CONTENT_LENGTH` int(11) DEFAULT NULL,
           `RESP_HEADERS` longblob,
           `RESP_CONTENT` longblob,
           `RESP_CONTENT_HASH` varchar(50) COLLATE utf16_bin DEFAULT NULL,
           PRIMARY KEY (`HTTP_CONN_ID`),
           KEY `IP_ID` (`IP_ID`),
           KEY `DOMAIN_ID` (`DOMAIN_ID`),
           KEY `URL_ID` (`URL_ID`),
           KEY `REFERER_ID` (`REFERER_ID`),
           KEY `ESLD_ID` (`ESLD_ID`),
           KEY `SERVER_ID` (`SERVER_ID`),
           KEY `UA_ID` (`UA_ID`),
           KEY `CONN_ID` (`CONN_ID`),
           KEY `RUN_ID` (`RUN_ID`),
           KEY `SSL_ID` (`SSL_ID`))
        ENGINE=InnoDB DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;

        ALTER TABLE `NET_HTTP_PROXY`
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_1` FOREIGN KEY (`IP_ID`) 
            REFERENCES `NET_ADDRESSES` (`IP_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_2` FOREIGN KEY (`DOMAIN_ID`)
            REFERENCES `NET_DOMAINS` (`DOMAIN_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_3` FOREIGN KEY (`URL_ID`) 
            REFERENCES `NET_URLS` (`URL_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_4` FOREIGN KEY (`REFERER_ID`) 
            REFERENCES `NET_URLS` (`URL_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_5` FOREIGN KEY (`ESLD_ID`) 
            REFERENCES `NET_ESLDS` (`ESLD_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_6` FOREIGN KEY (`SERVER_ID`) 
            REFERENCES `NET_HTTP_SERVERS` (`SERVER_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_7` FOREIGN KEY (`UA_ID`) 
            REFERENCES `NET_HTTP_UA` (`UA_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_8` FOREIGN KEY (`CONN_ID`) 
            REFERENCES `NET_CONNS` (`CONN_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_9` FOREIGN KEY (`RUN_ID`) 
            REFERENCES `RUNS` (`RUN_ID`),
        ADD CONSTRAINT `NET_HTTP_PROXY_IBFK_10` FOREIGN KEY (`SSL_ID`) 
            REFERENCES `NET_SSL` (`SSL_ID`);

    """)
    cursor.close() 


def create_dns_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_DNS` (
                  `DNS_ID` int(11) NOT NULL AUTO_INCREMENT,
                  `CONN_ID` int(11) NOT NULL,
                  `RUN_ID` int(11) DEFAULT NULL,
                  `TS` timestamp NOT NULL,
                  `TS_USEC` int(11) NOT NULL,
                  `TRANS_ID` varchar(20) COLLATE utf16_bin NOT NULL,
                  `QUERY_ID` int(11) DEFAULT NULL,
                  `QTYPE` smallint(5) unsigned DEFAULT NULL,
                  `RCODE` smallint(5) unsigned DEFAULT NULL,
                  `AA` bit(1) DEFAULT NULL,
                  `TC` bit(1) DEFAULT NULL,
                  `RD` bit(1) DEFAULT NULL,
                  `RA` bit(1) DEFAULT NULL,
                  PRIMARY KEY (`DNS_ID`),
                  UNIQUE KEY `DNS_UNIQUE` (`CONN_ID`,`TS`,`TS_USEC`,
                                           `TRANS_ID`,`QUERY_ID`),
                  KEY `CONN_ID` (`CONN_ID`),
                  KEY `RUN_ID` (`RUN_ID`),
                  KEY `NET_DNS_IBFK_3` (`QTYPE`),
                  KEY `NET_DNS_IBFK_4` (`RCODE`),
                  KEY `NET_DNS_IBFK_5` (`QUERY_ID`))
       ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;

       ALTER TABLE `NET_DNS`
       ADD CONSTRAINT `FK_DNS_RUN_ID` FOREIGN KEY (`RUN_ID`) 
           REFERENCES `RUNS` (`RUN_ID`),
       ADD CONSTRAINT `NET_DNS_IBFK_1` FOREIGN KEY (`CONN_ID`) 
           REFERENCES `NET_CONNS` (`CONN_ID`),
       ADD CONSTRAINT `NET_DNS_IBFK_3` FOREIGN KEY (`QTYPE`) 
           REFERENCES `NET_DNS_TYPES` (`TYPE_ID`),
       ADD CONSTRAINT `NET_DNS_IBFK_4` FOREIGN KEY (`RCODE`) 
           REFERENCES `NET_DNS_RCODES` (`RCODE_ID`),
       ADD CONSTRAINT `NET_DNS_IBFK_5` FOREIGN KEY (`QUERY_ID`) 
           REFERENCES `NET_DOMAINS` (`DOMAIN_ID`);
       """)
    cursor.close() 


def create_conns_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_CONNS` (
               `CONN_ID` int(11) NOT NULL AUTO_INCREMENT,
               `RUN_ID` int(11) DEFAULT NULL,
               `CONN_HASH` varchar(50) COLLATE utf16_bin NOT NULL,
               `TS` timestamp NULL DEFAULT NULL,
               `TS_USEC` int(11) NOT NULL,
               `UID` varchar(50) COLLATE utf16_bin NOT NULL,
               `SRC_IP` int(11) NOT NULL,
               `SRC_PORT` int(11) NOT NULL,
               `DST_IP` int(11) NOT NULL,
               `DST_PORT` int(30) NOT NULL,
               `PROTO` varchar(20) COLLATE utf16_bin NOT NULL,
               `SERVICE` varchar(20) COLLATE utf16_bin DEFAULT NULL,
               `DURATION` float DEFAULT NULL,
               `ORIG_BYTES` int(11) DEFAULT NULL,
               `RESP_BYTES` int(200) DEFAULT NULL,
               `CONN_STATE` varchar(11) COLLATE utf16_bin DEFAULT NULL,
               `MISSED_BYTES` int(100) DEFAULT NULL,
               `HISTORY` varchar(500) COLLATE utf16_bin DEFAULT NULL,
               `ORIG_PKTS` int(11) DEFAULT NULL,
               `ORIG_IP_BYTES` int(11) DEFAULT NULL,
               `RESP_PKTS` int(11) DEFAULT NULL,
               `RESP_IP_BYTES` int(11) DEFAULT NULL,
               PRIMARY KEY (`CONN_ID`),
               KEY `RUN_ID` (`RUN_ID`),
               KEY `CONN_HASH_IDX` (`CONN_HASH`),
               KEY `NET_CONNS_IBFK_2` (`SRC_IP`),
               KEY `NET_CONNS_IBFK_3` (`DST_IP`))
       ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
       ALTER TABLE `NET_CONNS`
       ADD CONSTRAINT `FK_CONN_RUN_ID` FOREIGN KEY (`RUN_ID`) 
           REFERENCES `RUNS` (`RUN_ID`),
       ADD CONSTRAINT `NET_CONNS_IBFK_2` FOREIGN KEY (`SRC_IP`) 
           REFERENCES `NET_ADDRESSES` (`IP_ID`),
       ADD CONSTRAINT `NET_CONNS_IBFK_3` FOREIGN KEY (`DST_IP`)
           REFERENCES `NET_ADDRESSES` (`IP_ID`);""")
    cursor.close()

def create_ssl_validation(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_VALIDATION` (
                `VAL_ID` int(11) NOT NULL,
                `VAL` varchar(200) NOT NULL,
                PRIMARY KEY (`val_id`))
                """)
    cursor.close()

def populate_ssl_validation(conn):
    cursor = conn.cursor() 
    cursor.executemany("""INSERT INTO `NET_SSL_VALIDATION` (`VAL_ID`, `VAL`)
                    VALUES (%s, %s)""", [
                        (0, "ok"),
                        (2, "unable to get issuer certificate"),
                        (3, "unable to get certificate CRL"),
                        (4, "unable to decrypt certificate's signature"),
                        (5, "unable to decrypt CRL's signature"),
                        (6, "unable to decode issuer public key"),
                        (7, "certificate signature failure"),
                        (8, "CRL signature failure"),
                        (9, "certificate is not yet valid"),
                        (10, "certificate has expired"),
                        (11, "CRL is not yet valid"),
                        (12, "CRL has expired"),
                        (13, "format error in certificate's notBefore field"),
                        (14, "format error in certificate's notAfter field"),
                        (15, "format error in CRL's lastUpdate field"),
                        (16, "format error in CRL's nextUpdate field"),
                        (17, "out of memory"),
                        (18, "self signed certificate"),
                        (19, "self signed certificate in certificate chain"),
                        (20, "unable to get local issuer certificate"),
                        (21, "unable to verify the first certificate"),
                        (22, "certificate chain too long"),
                        (23, "certificate revoked"),
                        (24, "invalid CA certificate"),
                        (25, "path length constraint exceeded"),
                        (26, "unsupported certificate purpose"),
                        (27, "certificate not trusted"),
                        (28, "certificate rejected"),
                        (29, "subject issuer mismatch"),
                        (30, "authority and subject key identifier mismatch"),
                        (31, "authority and issuer serial number mismatch"),
                        (32,
                         "key usage does not include certificate signing"),
                        (50, "application verification failure")
                    ])
    cursor.close()

def create_ssl_ciphers(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_CIPHERS` (
                      `CIPHER_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `CIPHER` varchar(100) NOT NULL,
                      PRIMARY KEY (`CIPHER_ID`),
                      UNIQUE KEY `CIPHER_UNIQUE` (`CIPHER`)
                   ) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;
                """)
    cursor.close()


def create_ssl_fingerprints(conn):
    cursor = conn.cursor() 
    cursor.execute("""
           CREATE TABLE IF NOT EXISTS `NET_SSL_CLIENT_FINGERPRINTS` (
               `FPRINT_ID` int(11) NOT NULL AUTO_INCREMENT,
               `FPRINT_MD5` varchar(32) NOT NULL,
               `CIPHERS` varchar(2000) DEFAULT NULL,
               `EXTENSIONS` varchar(2000) DEFAULT NULL,
               `EC_CURVES` varchar(400) DEFAULT NULL,
               `EC_POINT_FORMATS` varchar(400) DEFAULT NULL,
               `CLIENT_SOFTWARE` varchar(1000) DEFAULT NULL,
               PRIMARY KEY (`FPRINT_ID`),
               UNIQUE KEY `FPRINT_MD5_UNIQUE` (`FPRINT_MD5`)
           ) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;""")
    cursor.close()


def create_ssl_ciphers_hashes(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_CIPHERS_HASHES` (
                      `CIPHER_HASH_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `CIPHER_HASH` varchar(100) NOT NULL,
                      PRIMARY KEY (`CIPHER_HASH_ID`),
                      UNIQUE KEY `UNIQUE_CIPHER_HASH` (`CIPHER_HASH`)
                )ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;""")
    cursor.close()

def create_ssl_ext_hashes(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_EXT_HASHES` (
                    `EXT_HASH_ID` int(11) NOT NULL AUTO_INCREMENT,
                    `EXT_HASH` varchar(100) NOT NULL,
                    PRIMARY KEY (`EXT_HASH_ID`),
                    UNIQUE KEY `UNIQUE_EXT_HASH` (`EXT_HASH`)
               )ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;
""")
    cursor.close()

def create_ssl_chain_pairs(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_CHAIN_PAIRS` (
                      `CHAIN_PAIR_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `CHAIN_ID` int(11) NOT NULL,
                      `CERT_IDX` int(11) DEFAULT NULL,
                      `CERT_ID` int(11) NOT NULL,
                      PRIMARY KEY (`CHAIN_PAIR_ID`),
                      UNIQUE KEY `CHAIN_CERT_UNIQUE` (`CHAIN_ID`,`CERT_ID`),
                      KEY `SSL_CHAIN_PAIRS_IBFK_1` (`CERT_ID`)
                    ) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;
                    ALTER TABLE `NET_SSL_CHAIN_PAIRS`
                    ADD CONSTRAINT `SSL_CHAIN_PAIRS_IBFK_1` 
                       FOREIGN KEY (`CERT_ID`) 
                       REFERENCES `NET_SSL_CERTS` (`CERT_ID`);
                   """)
    cursor.close() 


def create_ssl_c_chain_pairs(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_C_CHAIN_PAIRS` (
                      `C_CHAIN_PAIR_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `CHAIN_ID` int(11) NOT NULL,
                      `CERT_IDX` int(11) DEFAULT NULL,
                      `CERT_ID` int(11) NOT NULL,
                      PRIMARY KEY (`C_CHAIN_PAIR_ID`),
                      UNIQUE KEY `UNQUE_PAIR` (`CHAIN_ID`,`CERT_ID`),
                      KEY `SSL_C_CHAIN_PAIRS_IBFK_1` (`CERT_ID`)
                   ) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;
                   ALTER TABLE `NET_SSL_C_CHAIN_PAIRS`
                   ADD CONSTRAINT `SSL_C_CHAIN_PAIRS_IBFK_1` 
                     FOREIGN KEY (`CERT_ID`) 
                     REFERENCES `NET_SSL_CERTS` (`CERT_ID`);
                """)
    cursor.close()


def create_ssl_chain_hashes(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_CHAIN_HASHES` (
                      `CHAIN_HASH_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `CHAIN_HASH` varchar(100) NOT NULL,
                      PRIMARY KEY (`CHAIN_HASH_ID`),
                      UNIQUE KEY `CHAIN_HASH_UNIQUE` (`CHAIN_HASH`)
                   )ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;
                   """)
    cursor.close()

def create_ssl_ext_san_pairs(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_EXT_SAN_PAIRS` (
                      `EXT_SAN_PAIR_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `CERT_ID` int(11) NOT NULL,
                      `DOMAIN_ID` int(11) DEFAULT NULL,
                      PRIMARY KEY (`EXT_SAN_PAIR_ID`),
                      UNIQUE KEY `CERT_DOMAIN_UNQUE` (`CERT_ID`,`DOMAIN_ID`),
                      KEY `SSL_EXT_SAN_PAIRS_IBFK_2` (`DOMAIN_ID`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;
                    ALTER TABLE `NET_SSL_EXT_SAN_PAIRS`
                    ADD CONSTRAINT `SSL_EXT_SAN_PAIRS_IBFK_1` 
                        FOREIGN KEY (`CERT_ID`) 
                        REFERENCES `NET_SSL_CERTS` (`CERT_ID`),
                    ADD CONSTRAINT `SSL_EXT_SAN_PAIRS_IBFK_2` 
                        FOREIGN KEY (`DOMAIN_ID`) 
                        REFERENCES `NET_DOMAINS` (`DOMAIN_ID`);
                """)
    cursor.close() 


def create_ssl_version(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_VERSIONS` (
                      `VERSION_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `VERSION` varchar(100) COLLATE utf16_bin NOT NULL,
                      PRIMARY KEY (`VERSION_ID`),
                      UNIQUE KEY `UNIQUE_VERSION` (`VERSION`)
     ) ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
     """)
    cursor.close()

def create_ssl_sig_algs(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_SIG_ALGS` (
                   `SIG_ALG_ID` int(11) NOT NULL AUTO_INCREMENT,
                   `SIG_ALG` varchar(200) CHARACTER SET utf8 NOT NULL,
                   PRIMARY KEY (`SIG_ALG_ID`),
                   UNIQUE KEY `UNIQUE_SIG_ALG` (`SIG_ALG`)
    )ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
    """)
    cursor.close()

def create_ssl_certs(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_CERTS` (
                      `CERT_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `DER_HASH` varchar(32) NOT NULL,
                      `PEM_HASH` varchar(32) NOT NULL,
                      `SUBJECT` varchar(3000) DEFAULT NULL,
                      `SUBJECT_CN` varchar(100) DEFAULT NULL,
                      `SUBJECT_O` varchar(100) DEFAULT NULL,
                      `SUBJECT_OU` varchar(200) DEFAULT NULL,
                      `SUBJECT_C` varchar(100) DEFAULT NULL,
                      `SUBJECT_ST` varchar(100) DEFAULT NULL,
                      `SUBJECT_L` varchar(100) DEFAULT NULL,
                      `SUBJECT_EMAIL` varchar(100) DEFAULT NULL,
                      `ISSUER` varchar(500) DEFAULT NULL,
                      `ISSUER_CN` varchar(100) DEFAULT NULL,
                      `ISSUER_O` varchar(100) DEFAULT NULL,
                      `ISSUER_OU` varchar(200) DEFAULT NULL,
                      `ISSUER_C` varchar(100) DEFAULT NULL,
                      `ISSUER_ST` varchar(100) DEFAULT NULL,
                      `ISSUER_L` varchar(100) DEFAULT NULL,
                      `ISSUER_EMAIL` varchar(100) DEFAULT NULL,
                      `NOT_VALID_BEFORE` datetime DEFAULT NULL,
                      `NOT_VALID_AFTER` datetime DEFAULT NULL,
                      `KEY_SIZE` int(11) DEFAULT NULL,
                      `SIG_ALG_ID` int(11) DEFAULT NULL,
                      `NUM_EXT` int(11) DEFAULT NULL,
                      `EXT_CA` tinyint(1) DEFAULT NULL,
                      `VERSION` int(11) DEFAULT NULL,
                      `SERIAL_NUMBER` varchar(500) DEFAULT NULL,
                      `EXPIRED` tinyint(1) DEFAULT NULL,
                      `EXT_SAN_NUM` int(11) DEFAULT NULL,
                      `EXT_AKI_ID` int(11) DEFAULT NULL,
                      `EXT_SKI_ID` int(11) DEFAULT NULL,
                      PRIMARY KEY (`CERT_ID`),
                      UNIQUE KEY `DER_HASH_UNIQUE` (`DER_HASH`),
                      KEY `ssl_certs_ibfk_1` (`EXT_AKI_ID`),
                      KEY `ssl_certs_ibfk_2` (`EXT_SKI_ID`),
                      KEY `ssl_certs_ibfk_3` (`SIG_ALG_ID`)
                 ) ENGINE=InnoDB  DEFAULT CHARSET=utf16 AUTO_INCREMENT=1;

                 ALTER TABLE `NET_SSL_CERTS`
                 ADD CONSTRAINT `SSL_CERTS_IBFK_1` FOREIGN KEY (`EXT_AKI_ID`)
                     REFERENCES `NET_SSL_EXT_HASHES` (`EXT_HASH_ID`),
                 ADD CONSTRAINT `SSL_CERTS_IBFK_2` FOREIGN KEY (`EXT_SKI_ID`)
                     REFERENCES `NET_SSL_EXT_HASHES` (`EXT_HASH_ID`),
                 ADD CONSTRAINT `SSL_CERTS_IBFK_3` FOREIGN KEY (`SIG_ALG_ID`) 
                     REFERENCES `NET_SSL_SIG_ALGS` (`SIG_ALG_ID`);
                 """)
    cursor.close()


def create_ssl_resumption_table(conn):
    cursor = conn.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_SSL_RESUMPTIONS` (
                      `ID` int(11) NOT NULL AUTO_INCREMENT,
                      `RESUMPTION_VALUE` varchar(100) NOT NULL,
                      PRIMARY KEY (`ID`),
                      UNIQUE KEY `UNIQUE_RESUM_VALUE` (`RESUMPTION_VALUE`)
                ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;""")
    cursor.close() 


def create_ssl_table(conn):
    cursor = conn.cursor() 
    cursor.execute("""
            CREATE TABLE IF NOT EXISTS `NET_SSL` (
                `SSL_ID` int(11) NOT NULL AUTO_INCREMENT,
                `CONN_ID` int(11) NOT NULL,
                `RUN_ID` int(11) NOT NULL,
                `TS` timestamp NULL DEFAULT NULL,
                `TS_USEC` int(11) NOT NULL,
                `IP_ID` int(11) DEFAULT NULL,
                `DOMAIN_ID` int(11) DEFAULT NULL,
                `SNI_ID` int(11) DEFAULT NULL,
                `C_FINGERPRINT_ID` int(11) DEFAULT NULL,
                `VERSION_ID` int(11) DEFAULT NULL,
                `CIPHER_ID` int(11) DEFAULT NULL,
                `CHAIN_ID` int(11) DEFAULT NULL,
                `LEAF_CERT_ID` int(11) DEFAULT NULL,
                `C_CHAIN_ID` int(11) DEFAULT NULL,
                `C_LEAF_CERT_ID` int(11) DEFAULT NULL,
                `NUM_SERVER_CERTS` int(11) DEFAULT NULL,
                `VALIDATION_ID` int(11) DEFAULT NULL,
                `NUM_CLIENT_CERTS` int(11) DEFAULT NULL,
                `NUM_C_CIPHERS` int(11) DEFAULT NULL,
                `C_CIPHERS_HASH_ID` int(11) DEFAULT NULL,
                `NUM_C_EXT` int(11) DEFAULT NULL,
                `C_EXT_HASH_ID` int(11) DEFAULT NULL,
                `NUM_S_EXT` int(11) DEFAULT NULL,
                `S_EXT_HASH_ID` int(11) DEFAULT NULL,
                `ESTABLISHED` tinyint(1) NOT NULL,
                `RESUMED` tinyint(1) NOT NULL,
                `FAKE_RESUMPTION` tinyint(1) NOT NULL,
                `C_SESSION_ID` int(100) DEFAULT NULL,
                `S_SESSION_ID` int(100) DEFAULT NULL,
                `C_SESSION_TICKET_HASH_ID` int(100) DEFAULT NULL,
                `S_SESSION_TICKET_HASH_ID` int(100) DEFAULT NULL,
          PRIMARY KEY (`SSL_ID`),
          KEY `CONN_ID` (`CONN_ID`),
          KEY `RUN_ID` (`RUN_ID`),
          KEY `NET_SSL_IBFK_3` (`IP_ID`),
          KEY `NET_SSL_IBFK_4` (`DOMAIN_ID`),
          KEY `NET_SSL_IBFK_5` (`SNI_ID`),
          KEY `NET_SSL_IBFK_6` (`VALIDATION_ID`),
          KEY `NET_SSL_IBFK_7` (`CIPHER_ID`),
          KEY `NET_SSL_IBFK_8` (`C_CIPHERS_HASH_ID`),
          KEY `NET_SSL_IBFK_9` (`C_EXT_HASH_ID`),
          KEY `NET_SSL_IBFK_10` (`S_EXT_HASH_ID`),
          KEY `NET_SSL_IBFK_11` (`CHAIN_ID`),
          KEY `NET_SSL_IBFK_12` (`C_CHAIN_ID`),
          KEY `NET_SSL_IBFK_13` (`LEAF_CERT_ID`),
          KEY `NET_SSL_IBFK_14` (`C_LEAF_CERT_ID`),
          KEY `NET_SSL_IBFK_15` (`VERSION_ID`),
          KEY `NET_SSL_IBFK_16` (`C_FINGERPRINT_ID`),
          KEY `FK_C_SESSION_ID` (`C_SESSION_ID`),
          KEY `FK_S_SESSION_ID` (`S_SESSION_ID`),
          KEY `FK_C_SESSION_TICKET_HASH_ID` (`C_SESSION_TICKET_HASH_ID`),
          KEY `FK_S_SESSION_TICKET_HASH_ID` (`S_SESSION_TICKET_HASH_ID`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;

ALTER TABLE `NET_SSL`
  ADD CONSTRAINT `FK_S_SESSION_TICKET_HASH_ID` FOREIGN KEY
      (`S_SESSION_TICKET_HASH_ID`) REFERENCES `NET_SSL_RESUMPTIONS` (`ID`),
  ADD CONSTRAINT `FK_C_SESSION_ID` FOREIGN KEY
      (`C_SESSION_ID`) REFERENCES `NET_SSL_RESUMPTIONS` (`ID`),
  ADD CONSTRAINT `FK_C_SESSION_TICKET_HASH_ID` FOREIGN KEY
      (`C_SESSION_TICKET_HASH_ID`) REFERENCES `NET_SSL_RESUMPTIONS` (`ID`),
  ADD CONSTRAINT `FK_SSL_RUN_ID` FOREIGN KEY
      (`RUN_ID`) REFERENCES `RUNS` (`RUN_ID`),
  ADD CONSTRAINT `FK_S_SESSION_ID` FOREIGN KEY
      (`S_SESSION_ID`) REFERENCES `NET_SSL_RESUMPTIONS` (`ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_1` FOREIGN KEY
      (`CONN_ID`) REFERENCES `NET_CONNS` (`CONN_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_10` FOREIGN KEY
      (`S_EXT_HASH_ID`) REFERENCES `NET_SSL_EXT_HASHES` (`EXT_HASH_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_11` FOREIGN KEY
      (`CHAIN_ID`) REFERENCES `NET_SSL_CHAIN_HASHES` (`CHAIN_HASH_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_12` FOREIGN KEY
      (`C_CHAIN_ID`) REFERENCES `NET_SSL_CHAIN_HASHES` (`CHAIN_HASH_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_13` FOREIGN KEY
      (`LEAF_CERT_ID`) REFERENCES `NET_SSL_CERTS` (`CERT_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_14` FOREIGN KEY
      (`C_LEAF_CERT_ID`) REFERENCES `NET_SSL_CERTS` (`CERT_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_15` FOREIGN KEY
      (`VERSION_ID`) REFERENCES `NET_SSL_VERSIONS` (`VERSION_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_16` FOREIGN KEY
   (`C_FINGERPRINT_ID`) REFERENCES `NET_SSL_CLIENT_FINGERPRINTS` (`FPRINT_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_3` FOREIGN KEY
      (`IP_ID`) REFERENCES `NET_ADDRESSES` (`IP_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_4` FOREIGN KEY
      (`DOMAIN_ID`) REFERENCES `NET_DOMAINS` (`DOMAIN_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_5` FOREIGN KEY
      (`SNI_ID`) REFERENCES `NET_DOMAINS` (`DOMAIN_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_6` FOREIGN KEY
      (`VALIDATION_ID`) REFERENCES `NET_SSL_VALIDATION` (`VAL_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_7` FOREIGN KEY
      (`CIPHER_ID`) REFERENCES `NET_SSL_CIPHERS` (`CIPHER_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_8` FOREIGN KEY
  (`C_CIPHERS_HASH_ID`) REFERENCES `NET_SSL_CIPHERS_HASHES` (`CIPHER_HASH_ID`),
  ADD CONSTRAINT `NET_SSL_IBFK_9` FOREIGN KEY
      (`C_EXT_HASH_ID`) REFERENCES `NET_SSL_EXT_HASHES` (`EXT_HASH_ID`);""")
    cursor.close() 


def create_mime_types(cur):
    cur.execute("""
    CREATE TABLE IF NOT EXISTS `NET_MIME_TYPES` (
         `MIME_ID` int(11) NOT NULL AUTO_INCREMENT,
         `MIME` varchar(150) COLLATE utf16_bin NOT NULL,
         `MIME_HASH` varchar(32) COLLATE utf16_bin NOT NULL,
         PRIMARY KEY (`MIME_ID`),
         UNIQUE KEY `MIME_HASH_UNIQUE` (`mime_hash`))
       ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
    """)
    cur.close()

def create_http_servers(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_HTTP_SERVERS` (
        `server_id` int(11) NOT NULL AUTO_INCREMENT,
        `server` varchar(2000) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
        `server_hash` varchar(53) COLLATE utf16_bin NOT NULL,
        PRIMARY KEY (`server_id`),
        UNIQUE KEY `SERVER_HASH_UNIQUE` (`server_hash`))
       ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
        """)
    cursor.close() 


def create_http_ua(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_HTTP_UA` (
            `UA_ID` int(11) NOT NULL AUTO_INCREMENT,
            `UA` varchar(2000) CHARACTER SET utf8 NOT NULL,
            `UA_HASH` varchar(53) COLLATE utf16_bin NOT NULL,
            PRIMARY KEY (`UA_ID`),
            UNIQUE KEY `UNIQUE_UA_HASH` (`UA_HASH`))
       ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
       """)
    cursor.close()

def create_eslds(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_ESLDS` (
                      `ESLD_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `ESLD` varchar(255) CHARACTER SET utf8 NOT NULL,
                      PRIMARY KEY (`ESLD_ID`),
                      UNIQUE KEY `UNIQUE_ESLD` (`ESLD`)
     ) ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
     """)
    cursor.close()

def create_domains(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_DOMAINS` (
                      `DOMAIN_ID` int(11) NOT NULL AUTO_INCREMENT,
                      `DOMAIN` varchar(255) CHARACTER SET utf8 NOT NULL,
                      `ESLD_ID` int(11) DEFAULT NULL,
                      PRIMARY KEY (`DOMAIN_ID`),
                      UNIQUE KEY `UNIQUE_DOMAIN` (`DOMAIN`),
                      KEY `ESLD_ID` (`ESLD_ID`))
      ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;

      ALTER TABLE `NET_DOMAINS`
      ADD CONSTRAINT `NET_DOMAINS_IBFK_1` FOREIGN KEY (`ESLD_ID`) 
      REFERENCES `NET_ESLDS` (`ESLD_ID`);
      """)
    cursor.close()

def create_urls(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_URLS` (
          `URL_ID` int(11) NOT NULL AUTO_INCREMENT,
          `URL` mediumtext COLLATE utf16_bin NOT NULL,
          `URL_HASH` varchar(53) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
          PRIMARY KEY (`URL_ID`),
          UNIQUE KEY `UNIQUE_URL` (`URL_HASH`)
    ) ENGINE=InnoDB  DEFAULT CHARSET=utf16 COLLATE=utf16_bin AUTO_INCREMENT=1;
                """)
    cursor.close() 


def create_addresses(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_ADDRESSES` (
                     `IP_ID` int(11) NOT NULL AUTO_INCREMENT,
                     `IP` varchar(500) NOT NULL,
                     `GEO` varchar(8) DEFAULT NULL,
                     `CIDR` varchar(50) DEFAULT NULL,
                     `ASN` int(11) DEFAULT NULL,
                     `AS_DESCRIPTION` varchar(500) DEFAULT NULL,
                     PRIMARY KEY (`IP_ID`),
                     UNIQUE KEY `UNIQUE_IP` (`IP`(20))
                   ) ENGINE=InnoDB  DEFAULT CHARSET=utf16 AUTO_INCREMENT=1;
                """)
    cursor.close()

def create_pairs(conn):
    cursor = conn.cursor() 
    cursor.execute("""CREATE TABLE IF NOT EXISTS `NET_DNS_ANSWERS` (
         `RR_ID` int(11) NOT NULL AUTO_INCREMENT,
         `DNS_ID` int(11) DEFAULT NULL,
         `TYPE_ID` smallint(5) unsigned DEFAULT NULL,
         `IP_ID` int(11) DEFAULT NULL,
         `ALIAS_ID` int(11) DEFAULT NULL,
         `TTL` int(22) DEFAULT NULL,
         PRIMARY KEY (`RR_ID`),
         UNIQUE KEY `UNIQUE_ENTRY` (`DNS_ID`,`TYPE_ID`,`IP_ID`,
                                    `ALIAS_ID`,`TTL`),
         KEY `ALIAS_ID` (`ALIAS_ID`),
         KEY `IP_ID` (`IP_ID`),
         KEY `TYPE_ID` (`TYPE_ID`))
         ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;

         ALTER TABLE `NET_DNS_ANSWERS`
         ADD CONSTRAINT `NET_DNS_ANSWERS_IBFK_1` FOREIGN KEY (`DNS_ID`) 
             REFERENCES `NET_DNS` (`DNS_ID`),
         ADD CONSTRAINT `NET_DNS_ANSWERS_ibfk_2` FOREIGN KEY (`ALIAS_ID`) 
             REFERENCES `NET_DOMAINS` (`DOMAIN_ID`),
         ADD CONSTRAINT `NET_DNS_ANSWERS_IBFK_3` FOREIGN KEY (`IP_ID`) 
             REFERENCES `NET_ADDRESSES` (`IP_ID`),
         ADD CONSTRAINT `NET_DNS_ANSWERS_IBFK_4` FOREIGN KEY (`TYPE_ID`) 
             REFERENCES `NET_DNS_TYPES` (`TYPE_ID`);
         """)
    cursor.close

def truncate_tables():
    cur, conn = db.ConnectDB(config.db_host, config.db_name, config.db_user,
                         config.db_pass)
    cur.execute("""SET foreign_key_checks = 0;
                TRUNCATE TABLE NET_CONNS;
                TRUNCATE TABLE NET_DNS;
                TRUNCATE TABLE `NET_SSL`;
                TRUNCATE TABLE NET_HTTP_SERVERS;
                TRUNCATE TABLE NET_HTTP_UA;
                TRUNCATE TABLE NET_HTTP_PROXY;
                TRUNCATE TABLE NET_HTTP;
                TRUNCATE TABLE NET_FILES;
                TRUNCATE TABLE NET_ESLDS;
                TRUNCATE TABLE NET_DOMAINS;
                TRUNCATE TABLE NET_URLS;
                TRUNCATE TABLE NET_ADDRESSES;
                TRUNCATE TABLE NET_DNS_ANSWERS;
                TRUNCATE TABLE NET_SSL_CIPHERS;
                TRUNCATE TABLE NET_MIME_TYPES;
                TRUNCATE TABLE NET_SSL_RESUMPTIONS;
                TRUNCATE TABLE NET_SSL_EXT_HASHES;
                TRUNCATE TABLE NET_SSL_CLIENT_FINGERPRINTS;
                TRUNCATE TABLE NET_SSL_CIPHERS_HASHES;
                TRUNCATE TABLE NET_SSL_CHAIN_HASHES;
                TRUNCATE TABLE NET_SSL_CERTS;
                TRUNCATE TABLE NET_SSL_CHAIN_PAIRS;
                TRUNCATE TABLE NET_SSL_C_CHAIN_PAIRS;
                TRUNCATE TABLE NET_SSL_EXT_SAN_PAIRS;
                TRUNCATE TABLE NET_SSL_VERSIONS;
                TRUNCATE TABLE NET_SSL_SIG_ALGS;
                SET foreign_key_checks = 1""")


def drop_tables():
    cur, conn = db.ConnectDB(config.db_host, config.db_name, config.db_user,
                         config.db_pass)
    cur.execute("""SET foreign_key_checks = 0;
                DROP TABLE IF EXISTS NET_CONNS;
                DROP TABLE IF EXISTS NET_DNS;
                DROP TABLE IF EXISTS `NET_SSL`;
                DROP TABLE IF EXISTS NET_HTTP_SERVERS;
                DROP TABLE IF EXISTS NET_HTTP_UA;
                DROP TABLE IF EXISTS NET_HTTP_PROXY;
                DROP TABLE IF EXISTS NET_HTTP_BRO;
                DROP TABLE IF EXISTS NET_HTTP;
                DROP TABLE IF EXISTS NET_FILES;
                DROP TABLE IF EXISTS NET_ESLDS;
                DROP TABLE IF EXISTS NET_DOMAINS;
                DROP TABLE IF EXISTS NET_URLS;
                DROP TABLE IF EXISTS NET_ADDRESSES;
                DROP TABLE IF EXISTS NET_DNS_ANSWERS;
                DROP TABLE IF EXISTS NET_SSL_EXT_HASHES;
                DROP TABLE IF EXISTS NET_SSL_CIPHERS_HASHES;
                DROP TABLE IF EXISTS NET_DNS_TYPES;
                DROP TABLE IF EXISTS NET_DNS_RCODES;
                DROP TABLE IF EXISTS NET_HTTP_STATUS;
                DROP TABLE IF EXISTS NET_SSL_VALIDATION;
                DROP TABLE IF EXISTS NET_SSL_CIPHERS;
                DROP TABLE IF EXISTS NET_MIME_TYPES;
                DROP TABLE IF EXISTS NET_SSL_CLIENT_FINGERPRINTS;
                DROP TABLE IF EXISTS NET_SSL_CHAIN_HASHES;
                DROP TABLE IF EXISTS NET_SSL_RESUMPTIONS;
                DROP TABLE IF EXISTS NET_SSL_CERTS;
                DROP TABLE IF EXISTS NET_SSL_CHAIN_PAIRS;
                DROP TABLE IF EXISTS NET_SSL_C_CHAIN_PAIRS;
                DROP TABLE IF EXISTS NET_SSL_EXT_SAN_PAIRS;
                DROP TABLE IF EXISTS NET_SSL_VERSIONS;
                DROP TABLE IF EXISTS NET_SSL_SIG_ALGS;
                SET foreign_key_checks = 1""")
    conn.commit()
    conn.close()


def create_tables():
    cur, conn = db.ConnectDB(config.db_host, config.db_name, config.db_user,
                         config.db_pass)

    create_mime_types(cur)
    create_http_status_table(conn)
    create_dns_types_table(conn)
    create_dns_rcodes_table(conn)
    create_ssl_validation(conn)
    create_ssl_ciphers(conn)
    create_ssl_ciphers_hashes(conn)
    create_ssl_ext_hashes(conn)
    populate_http_status_table(conn)
    populate_dns_types_table(conn)
    populate_dns_rcodes_table(conn)
    populate_ssl_validation(conn)

    create_eslds(conn)
    create_domains(conn)
    create_ssl_version(conn)
    create_ssl_sig_algs(conn)
    create_ssl_certs(conn)
    create_ssl_chain_pairs(conn)
    create_ssl_c_chain_pairs(conn)
    create_ssl_chain_hashes(conn)
    create_ssl_ext_san_pairs(conn)
    create_ssl_fingerprints(conn)
    create_addresses(conn)
    create_urls(conn)
    create_http_servers(conn)
    create_http_ua(conn)
    create_conns_table(conn)
    create_ssl_resumption_table(conn)
    create_ssl_table(conn)
    create_dns_table(conn)
    create_files_table(conn)
    create_http_proxy_table(conn)
    create_http_bro_table(conn)
    create_pairs(conn)
    conn.commit()
    conn.close()

if __name__ == '__main__':
    config = pconf.ProcessingConfig()
    if sys.argv[1] == "create":
        create_tables()
    elif sys.argv[1] == "truncate":
        truncate_tables()
    elif sys.argv[1] == "drop":
        drop_tables()
    else:
        sys.stderr.write("Wrong arguments\n")
        usage()
