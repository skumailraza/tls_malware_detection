#!/usr/bin/env python
# -*- coding: utf-8 -*-

import optparse
import json
import os
from collections import defaultdict

# Global
fields_to_compare = ['avg', 'stdev', 'std_avg', 'homs', 'mean', 'score']
#fields_to_compare = ['avg', 'stdev', 'homs', 'mean']

def print_difflist(dlist):
    for diffd in dlist:
        for feat_name, feat_list in diffd.items():
            print('{}:'.format(feat_name))
            for field in feat_list:
                for k, v in field.items():
                    print('\t{}:\n\t\t{}'.format(k, '\t'.join(e for e in v)))

def compare_clusters(c1, c2):
    l1 = 'Cluster {}'.format(c1['label'])
    l2 = 'Cluster {}'.format(c2['label'])
    print('Comparing {} and {}'.format(l1, l2))
    c1_num_centroid = c1['numeric_centroid']
    c2_num_centroid = c2['numeric_centroid']
    difflist = []
    for i, feature in enumerate(c1_num_centroid):
        name = feature['name']
        diffd = defaultdict(list)
        for field, c1_value in feature.items():
            c2_value = c2_num_centroid[i][field]
            if field in fields_to_compare:
                absd = abs(c1_value - c2_value)
                if absd > 0.001:
                    v1 = '{}: {:.{p}f}'.format(l1, c1_value, p=6)
                    v2 = '{}: {:.{p}f}'.format(l2, c2_value, p=6)
                    d = 'diff: {:.{p}f}'.format(absd, p=6)
                    diffd[name].append({field: (v1, v2, d)})
        if diffd: difflist.append(diffd)

    c1_list = compare_categoricals(c1, c2)
    c2_list = compare_categoricals(c2, c1)
    difflist.extend(c1_list)
    difflist.extend(c2_list)

    print_difflist(difflist)
    return difflist

def compare_categoricals(c1, c2):
    l1 = 'Cluster {}'.format(c1['label'])
    l2 = 'Cluster {}'.format(c2['label'])
    c1_top_cat = c1['top_categorical']
    c2_top_cat = c2['top_categorical']
    difflist = []
    for c1feature in c1_top_cat:
        c1fname = c1feature['name']
        c1fv = c1fname.split(':')
        c1name, c1val = c1fv[0], c1fv[1]
        found = False
        diffd = defaultdict(list)
        for c2feature in c2_top_cat:
            c2fv = c2feature['name'].split(':')
            c2name, c2val = c2fv[0], c2fv[1]
            if c1name == c2name:
                found = True
                lf = '{} {}'.format(l1, c1fname)
                if c1val == c2val:
                    for field, c1fval in c1feature.items():
                        if field in fields_to_compare:
                            c2fval = c2feature[field]
                            absd = abs(c1fval - c2fval)
                            if absd > 0.001:
                                v1 = '{}: {:.{p}f}'.format(l1, c1fval, p=6)
                                v2 = '{}: {:.{p}f}'.format(l2, c2fval, p=6)
                                d = 'diff: {:{p}f}'.format(absd, p=6)
                                diffd[lf].append({field: (v1, v2, d)})
                else:
                    diffd[lf].append({c1name: (c1val, c2val)})
        if not found:
            diffd[l1].append({c1name: (c1val, 'Not present')})
        if diffd: difflist.append(diffd)
    return difflist

def compare(jpath, c1_label, c2_label):
    c1 = c2 = {}
    found_other = False
    with open(jpath, 'r') as jfile:
        for pos, line in enumerate(jfile):
            line = json.loads(line.strip('\n'))
            for cluster in line:
                if str(cluster['label']) == str(c1_label):
                    c1 = cluster
                    if found_other:
                        break
                    else:
                        found_other = True
                    continue
                elif str(cluster['label']) == str(c2_label):
                    c2 = cluster
                    if found_other:
                        break
                    else:
                        found_other = True
                    continue
    return compare_clusters(c1, c2)


if __name__ == "__main__":
    parser = optparse.OptionParser(
        usage="Usage: %prog json_file label1 label2",
        version="%prog 1.0")

    options, args = parser.parse_args()

    if len(args) != 3:
        parser.error("Wrong number of arguments. Exiting.")
    if not os.path.isfile(args[0]):
        parser.error("JSON file not found. Exiting.")

    compare(args[0], args[1], args[2])
