#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import csv
import sys
import json
import optparse
from collections import Counter, defaultdict
from publicsuffixlist import PublicSuffixList
from publicsuffix import fetch as pfetch
libpath = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, libpath)
import extract_tld_esld

# Global
psl = object()
tranco_list = set()
bg_e2ld_list = set()
bg_fqdn_list = set()

def load_psl():
    global psl
    # Fetch PublicSuffix list and load it
#    if not psl:
    print('Loading Public Suffix List')
    psl_file = pfetch()
    psl = PublicSuffixList(psl_file)

def load_tranco_list(trancopath):
    global tranco_list
    # Load the tranco list
    if trancopath and not tranco_list:
        print('Loading tranco list from {}'.format(trancopath))
        with open(trancopath) as trancof:
            for line in trancof:
                # Add the domain name only
                domain_name = line.split(',')[1]
                tranco_list.add(domain_name.strip())

def load_noise_lists():
    global bg_e2ld_list
    global bg_fqdn_list
    # Load the background-noise lists
    if not bg_e2ld_list or not bg_fqdn_list:
        listname = '../data/background-noise/domainname-list'
        listpath = os.path.join(libpath, listname)
        print('Loading background noise list from {}'.format(listpath))
        with open(listpath) as listf:
            for line in listf:
                domain_name = line.strip()
                if domain_name.startswith('*'):
                    # Remove the *. at the beginning
                    bg_e2ld_list.add(domain_name[2:])
                else:
                    bg_fqdn_list.add(domain_name)

def is_in_tranco(server_name=''):
#    tld, e2ld = extract_tld_esld.get_tld_esld(psl, server_name)
    tld, e2ld = tld_esld(server_name)
    return e2ld in tranco_list

def is_in_bgnoise(server_name=''):
#    tld, e2ld = extract_tld_esld.get_tld_esld(psl, server_name)
    tld, e2ld = tld_esld(server_name)
    return (e2ld in bg_e2ld_list) or (server_name in bg_fqdn_list)

def tld_esld(server_name):
    return extract_tld_esld.get_tld_esld(psl, server_name)

def parse_dataset(benign, noise, empty, vectors, debug, dataset):
    load_psl()
    load_noise_lists()
    load_tranco_list(benign)
    data = []
    empty_filtered = set()
    noise_filtered = set()
    benign_filtered = defaultdict(set)
    counter = 0
    e_counter = 0
    b_counter = 0
    n_counter = 0
    with open(dataset) as csv_file:
        csv_dict = csv.DictReader(csv_file, delimiter='\t')
        for line in csv_dict:
            # Parse only n-vectors
            if counter == vectors:
                break
            # Ignore not established/empty connections
            if not empty and \
                    (line['established'].strip() != 'True' \
                    or line['enc_data_size'].strip() == '0'):
                empty_filtered.add(line['server_name'])
                e_counter += 1
                continue
            # Filter benign connections according to a specific list
            if not benign=='' and is_in_tranco(line['server_name']):
                seq = ','.join([str(line['msg_size_{}_{}'.format(d,p)]) \
                        for d, p in zip(('cscscs'), ('001122'))])
                benign_filtered[line['server_name']].add(seq)
                b_counter += 1
                continue
            # Filter background-noise connections
            if not noise and is_in_bgnoise(line['server_name']):
                noise_filtered.add(line['server_name'])
                n_counter += 1
                continue
            data.append(line)
            counter += 1
    if debug and not empty:
        print('Empty connections filtered: {}'.format(e_counter))
        print('Domain names: {}'.format(empty_filtered))
    if debug and not benign=='':
        print('Benign connections filtered: {}'.format(b_counter))
        print('Domain names: {}'.format(benign_filtered.keys()))
        seqs = [s for ss in benign_filtered for s in benign_filtered[ss]]
        print('Benign sequences found: {}\n{}'.format(len(seqs), seqs))
    if debug and not noise:
        print('Background-noise connections filtered: {}'.format(n_counter))
        print('Domain names: {}'.format(noise_filtered))
    return data, benign_filtered

def output_as_json(clusters, classes):
    res = []
    for label, cids in sorted(clusters.items()):
        idclasses = Counter(classes[i] for i in cids).most_common()
        current = {
            'label': int(label),
            'ids': cids,
            'avclass': idclasses,
            'size': len(cids),
        }
        res.append(current)
    return res


if __name__ == "__main__":
    # Test it using the groundtruth
    dataset = '../data/groundtruth/frompcaps.tsv'
    benign = '../data/tranco/tranco_83LV.csv'
    data, bng = parse_dataset(benign, '', '', 200, True, dataset)

    print('Processing {} vectors.'.format(len(data)))

