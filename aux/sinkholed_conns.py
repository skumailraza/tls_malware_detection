#!/usr/bin/env python
# -*- coding: utf-8 -*-
import json
import sys
import urllib2
import csv
from netaddr import IPNetwork, IPAddress


LOGS_JSON = '../pcap_processing/tls_mal_local.jsons'

SINKHOLE_URL = "https://raw.githubusercontent.com/brakmic/"\
               "Sinkholes/master/Sinkholes_List.csv"

def pprint_dict(dic):
    '''Pretty prints a dictionary'''
    import pprint
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(dic)


def get_sinkhole_list(url):
    sinkholed_ranges = {}
    filedata = urllib2.urlopen(url)
    # csvfile = csv.reader(filedata, delimiter=',')
    csvfile = csv.DictReader(filedata, delimiter=',')
    # Expected fields: 'Organization', 'IP Range', 'Whois', 'Notes'
    for row in csvfile:
        if '-' in row['IP Range']:
            # Some ranges are reported in a stupid way e.g., 131.253.18.11-12
            last = int(row['IP Range'].split('-')[1])
            first = int(row['IP Range'].split('-')[0].split('.')[-1])
            for x in range(first, last):
                base = [str(z) for z in row['IP Range'].split('.')[:3]]
                base.append(str(x))
                new_ip = '.'.join(base)
                sinkholed_ranges[IPNetwork(new_ip)] = row['Organization']
            continue
        sinkholed_ranges[IPNetwork(row['IP Range'])] = row['Organization']
    # for iprange in sinkholed_ranges:
    #     print list(iprange)
    # exit()
    return sinkholed_ranges

def main():
    """"""
    sinkholed_ranges = get_sinkhole_list(SINKHOLE_URL)
    with open(LOGS_JSON) as fr:
        for pos, en in enumerate(fr):
            # if pos and pos % 1000 == 0:
            #     break
            entry = json.loads(en)
            sha2 = entry[0].replace('.pcap', '')
            pcap_md5 = entry[1]
            if not entry[2]:
                continue
            if 'ssl_dm.log' not in entry[2]:
                continue
            for pos, en in enumerate(entry[2]['ssl_dm.log']):
                for ip_range, org in sinkholed_ranges.items():
                    if IPAddress(en['s_dst_ip']) in ip_range:
                        print "Found {} in range {} ({})".format(en['s_dst_ip'], ip_range, org)



if __name__ == '__main__':
    main()
