##! This script builds a user level DNS cache. 
##! The cache enables other scripts to map from IP addresses to DNS domains.

@load base/utils/site

module DNScache;

# We only recurse CNAMEs a maximum of 5 times
const one_to_5: vector of count = {1,2,3,4,5};

# Type used by the DNS cache
# Contains the query name and the TTL of the record
type DNSqr : record {
  query : string;
  ttl : interval;
};

# Table that implements the DNS cache for responses to A queries
# Maps <hostIP,resolvedIP> --> DNSqr
global dns_A_cache : table[addr,addr] of DNSqr 
  &create_expire = 0secs
  &expire_func=function (t: table[addr,addr] of DNSqr, idx: any): interval
  {
  local host_addr : addr;
  local resolved_addr : addr;

  # Get TTL
  [host_addr,resolved_addr] = idx;
  local sleep_time = t[host_addr,resolved_addr]$ttl;

  # Return TTL
  return sleep_time;
  };


# Table that implements the DNS cache for responses to CNAME queries
# Maps <hostIP,cname> --> DNSqr
global dns_CNAME_cache : table[addr,string] of DNSqr     
  &create_expire = 0secs
  &expire_func=function (t: table[addr,string] of DNSqr, idx: any): interval
  {
  local host_addr : addr;
  local name : string;

  # Get TTL
  [host_addr,name] = idx;
  local sleep_time = t[host_addr,name]$ttl;

  # Return TTL
  return sleep_time;
  };


export {
  # Function to check DNS cache
  function check_dns_cache(host_addr: addr, resolved_addr: addr): string
    {
    if ( [host_addr,resolved_addr] in dns_A_cache )
    {
      local domain = dns_A_cache[host_addr,resolved_addr]$query;
      for ( i in one_to_5 )
      {
        if ( [host_addr,domain] in dns_CNAME_cache )
          domain = dns_CNAME_cache[host_addr,domain]$query;
        else
          break;
      }
      return domain;
    }
    else
      return "NULL";
    }
}

# Dump DNS cache to given file
function dump_dns_cache(filename: string)
  {
  # Open file
  local outfile = open(filename);
  enable_raw_output(outfile);

  # Print header
  local cache_line : string;
  cache_line=fmt("#fields host\tanswer\tquery\tttl\n");
  print outfile, cache_line;

  # Print cache A entries
  local dns_record : DNSqr;
  for ( [a,b] in dns_A_cache )
    {
      dns_record = dns_A_cache[a,b];
      cache_line=fmt("%s\t%s\t%s\t%f\n",a,b,dns_record$query,dns_record$ttl);
      print outfile, cache_line;
    }

  # Print cache CNAME entries
  for ( [x,y] in dns_CNAME_cache )
    {
      dns_record = dns_CNAME_cache[x,y];
      cache_line=fmt("%s\t%s\t%s\t%f\n",x,y,dns_record$query,dns_record$ttl);
      print outfile, cache_line;
    }

  # Close the file
  close(outfile);
  }

# At end, dump the DNS cache
event bro_done()
  {
  dump_dns_cache("dns_cache.log");
  }

event dns_A_reply(c: connection, msg: dns_msg, ans: dns_answer, a: addr) &priority=-3
  {
  # Check if querying host is internal
  # if ( ! Site::is_local_addr(c$id$resp_h) )
  #   return;

  # Update DNS A cache
  if ( ans?$query )
    dns_A_cache[c$id$orig_h,a] = [$query = ans$query, $ttl = ans$TTL];
  }

event dns_CNAME_reply(c: connection, msg: dns_msg, ans: dns_answer, name: string) &priority=-3
  {
  # Update DNS CNAME cache
  if ( ans?$query )
    dns_CNAME_cache[c$id$orig_h,name] = [$query = ans$query, $ttl = ans$TTL];
  }


